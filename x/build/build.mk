include config.mk
include common.mk

# On Cygwin, generate a temporary shell script that is capable of
# process GCC-generated dependency files to convert all path references
# in them from the Windows to the corresponding Cygwin convention.
# (e.g. C:/Foo/foo -> /cygdrive/c/Foo/foo)
#
# This shell script is generated by passing the output of the cygwin
# 'mount' command to a special Awk script.
#
ifeq ($(HOST_OS),cygwin)
  GEN_CYGWIN_DEPS_CONVERTER := mount | awk -f $(ROOT_BUILD)/tools/gen-cygwin-deps-converter.awk
  ifeq ($(NDK_LOG),1)
    $(call x_info,Cygwin dependency file conversion script:)
    $(info ----- start of script ----)
    $(info $(shell $(GEN_CYGWIN_DEPS_CONVERTER)))
    $(info ------ end of script -----)
  endif
$(X_DEPENDENCIES_CONVERTER):
	@$(HOST_ECHO) "Cygwin         : Generating dependency file converter script"
	$(hide) mkdir -p $(dir $@)
	$(hide) $(GEN_CYGWIN_DEPS_CONVERTER) > $@ && chmod +x $@

clean-dependency-converter:
	$(hide) $(call host-rm,$(X_DEPENDENCIES_CONVERTER))
endif

ROOT_PROJECT := $(strip $(ROOT_PROJECT))

ifndef ROOT_PROJECT
    ROOT_PROJECT := $(call find-project-dir,.,x.mk)
endif

ifndef ROOT_PROJECT
    $(call x_info,Could not find application project directory !)
    $(call x_info,Please define the ROOT_PROJECT variable to point to it.)
    $(call x_error,Aborting)
endif

$(call x_log, project root is $(ROOT_PROJECT))

# Place all generated files here
OUT_TARGET := $(strip $(OUT_TARGET))
ifndef OUT_TARGET
  OUT_TARGET := $(ROOT_PROJECT)/out
endif
$(call x_log,Ouput path: $(OUT_TARGET))
X_DEPENDENCIES_CONVERTER := $(OUT_TARGET)/convert-dependencies.sh

ifndef X_MK
	X_MK := $(strip $(wildcard $(ROOT_PROJECT)/x.mk))
endif
include $(X_MK)

X_MODULE_FILENAME := $$(strip $$(X_MODULE_FILENAME))
ifndef X_MODULE_FILENAME
    X_MODULE_FILENAME := $1$(X_MODULE)
endif
X_MODULE_FILENAME := $(X_MODULE_FILENAME)

# -----------------------------------------------------------------------------
# Function  : handle-module-built
# Returns   : None
# Usage     : $(call handle-module-built)
# Rationale : To be used to automatically compute the location of the generated
#             binary file, and the directory where to place its object files.
# -----------------------------------------------------------------------------
handle-module-built = \
    $(eval LOCAL_BUILT_MODULE := $(OUT_TARGET)/$(LOCAL_MODULE_FILENAME))\
    $(eval LOCAL_OBJS_DIR     := $(TARGET_OBJS)/$(LOCAL_MODULE))

.PHONY $(X_MODULE)
$(X_MODULE)
